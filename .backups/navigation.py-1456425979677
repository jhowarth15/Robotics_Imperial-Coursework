import numpy as np
import math as math
import heapq
from robot import Robot as robot

def neighbours(loc, waypoints):
    neighbourz = []
    for xP in range(-1, 2):
        for xY in range(-1, 2):
            tLoc = loc + np.array([xP, xY])
            for wLoc in waypoints:
                if (tLoc == wLoc).all():
                    neighbourz.append(tLoc)
                    break

    return neighbourz

def nHash(n):
    return '({0},{1})'.format(n[0], n[1])


def aStar(start, end, waypoints):
    """
    aStar performs an A* search of the waypoints to find the shortest route to the end.
    The waypoints list assumes that every adjacent (i.e. +/- 1) point is connected.

    :param start: x, y coordinates (integers)
    :type start: list
    :param end: x, y coordinates (integers)
    :type end: list
    :param waypoints: list of x,y coordinates that can be moved to
    :type waypoints: list
    :rtype: list
    """
    if start == end: return []

    dtype = [('x', int),('y', int), ('distance', float)]

    current = list(start)
    frontier = np.array([(start[0], start[1], 0)], dtype=dtype)

    came_from = {}
    cost_so_far = {}
    came_from[nHash(start)] = [list(start)]
    cost_so_far[nHash(start)] = 0

    while len(frontier) != 0:
        current[0] = frontier[0][0]
        current[1] = frontier[0][1]
        frontier = frontier[1:]

        if current == end:
            return came_from[nHash(current)]

        for next in neighbours(current, waypoints):
            #print(next)
            new_cost = cost_so_far[nHash(current)] + 1
            if nHash(next) not in cost_so_far or new_cost < cost_so_far[nHash(current)]:
                cost_so_far[nHash(next)] = new_cost
                priority = new_cost + eDistance(end, next)
                q = np.array([(next[0], next[1], priority)], dtype=dtype)
                frontier = np.concatenate((frontier, q))

                #print([list(next)], [list(next)].append(came_from[nHash(current)]))
                next2 = list(came_from[nHash(current)])
                next2.append(list(next))
                came_from[nHash(next)] = list(next2)
                #came_from[nHash(next)] = list(list(next).append(came_from[nHash(current)]))

        frontier = np.sort(frontier, order='distance')
            #print(came_from, cost_so_far)
    #return came_from, cost_so_far
    return []

def oneMeter():
    myLoc = np.array([0, 0, 0])
    r = robot(myLoc)

    dest = np.array([100, 0, 0])
    myLoc = r.navigateToWaypoint(myLoc, dest)

def square(dist=40):
    offset = 100
    wpts = np.array([[offset, offset, 0],
                     [offset + dist, offset, 0],
                     [offset + dist, offset - dist, 0],
                     [offset, offset - dist, 0],
                     [offset, offset, 0],
                     [offset, offset, 0]])
    
    navigateThroughWaypoints(wpts)
    
def rectangle(l1=40, l2=100):
    myLoc = np.array([0, 0, 0])

    dest = np.array([0, l1, 0])
    myLoc = r.navigateToWaypoint(myLoc, dest)
    
    
    dest = np.array([l2, l1, 0])
    myLoc = r.navigateToWaypoint(myLoc, dest)
    
    dest = np.array([l2, 0, 0])
    myLoc = r.navigateToWaypoint(myLoc, dest)
    
    dest = np.array([0, 0, 0])
    myLoc = r.navigateToWaypoint(myLoc, dest)
    myLoc = r.navigateToWaypoint(myLoc, dest) # Straighten up
    

    
def line():
    
    offset = 100
    wpts = np.array([[offset, offset, 0],
                     [offset + 100, offset, 0],
                     [offset, offset, 0],
                     [offset, offset, 0]])
    
    navigateThroughWaypoints(wpts)
    

def userInput():   
    myLoc = np.array([0, 0, 0])
    r = robot(myLoc)
    
    while True:
        x = float(input("Enter a x coordinate (in cm): "))
        y = float(input("Enter a y coordinate (in cm): "))
        dest = np.array([x, y, 0])
        myLoc = navigateToWaypoint(myLoc, dest)
        print(myLoc)

def cwWaypoints():
    wpts = np.array([[84, 30, 0],
                     [180, 30, 0],
                     [180,54, 0], 
                     [138, 54, 0],
                     [138, 168, 0],
                     [114, 168, 0],
                     [114, 84, 0],
                     [84, 84, 0],
                     [84, 30, 0]])

    navigateThroughWaypoints(wpts)
        
def navigateThroughWaypoints(wpts):    
    for wp in wpts:
        xSz = 5
        print "drawLine: " + str((wp[0] - xSz, wp[1], wp[0] + xSz, wp[1]))
        print "drawLine: " + str((wp[0], wp[1] - xSz, wp[0], wp[1] + xSz))
    
    
    myLoc = wpts[0]
    r = robot(myLoc)
    
    for wp in wpts[1:]:
        
        #myLoc = r.navigateToWaypoint(myLoc, wp)
        
        myLoc = r.turnToWaypoint(myLoc, wp)
        
        #correcting turn
        # myLoc = r.turnToWaypoint(myLoc, wp)

        myLoc = r.moveToWaypoint(myLoc, wp)

        print("At location: [{0}, {1}, {2}]".format(myLoc[0], myLoc[1], myLoc[2]))                 
    
    
        
if __name__ == "__main__":
    
    # line()
    # userInput()
    
    #square()
    
    # cwWaypoints()
    square(80)