import brickpi
import time
from sonarClass import Sonar
import math

class Sonar360Readings:
    
        
    def getSonar360(self):

        interface=brickpi.Interface()
        interface.initialize()

        motors = [1]

        interface.motorEnable(motors[0])

        
        #Assume corrctly tuned
        motorParams = interface.MotorAngleControllerParameters()
        motorParams.maxRotationAcceleration = 1.0
        motorParams.maxRotationSpeed = 1.0
        motorParams.feedForwardGain = 255/20.0
        motorParams.minPWM = 5.0
        motorParams.pidParameters.minOutput = -255
        motorParams.pidParameters.maxOutput = 255
        motorParams.pidParameters.k_p = 100.0
        motorParams.pidParameters.k_i = 100.0
        motorParams.pidParameters.k_d = 80.0

        interface.setMotorAngleControllerParameters(motors[0],motorParams)

        
        #Set angle diff between readings
        full360 = 2 * math.pi
        full180 = math.pi
        turnIncrement = full360 / 360  # 1 degree
        x = 0
        turned = 0.0
        
             
        #Turn 180 right while taking sonar readings
        while (turned < full180)
            sonarSignatures[x] = sonar.getSonarReading() #don't think this array will work - use list instead
            interface.increaseMotorAngleReferences(motors,[turnIncrement])
            x = x + 1
            turned = turned + turnIncrement
        
        #Turn 360 left while taking sonar readings
        
        
        
        #Turn 180 right while taking sonar readings
        
        
        
        # return array of sonar readings
        return sonarSignatures[]
        
        # sonar = Sonar()

        angle = float(input("Enter a angle to rotate (in radians): "))

        interface.increaseMotorAngleReferences(motors,[angle])
        # print sonar.getSonarReading()

        # print interface.getMotorAngles(motors)
        print interface.getMotorAngleReferences(motors)

        while not interface.motorAngleReferencesReached(motors) :
            motorAngles = interface.getMotorAngles(motors)
            if motorAngles :
                print "Motor angles: ", motorAngles[0][0], ", Target: ", interface.getMotorAngleReferences(motors)
                time.sleep(0.1)



                
                
        interface.terminate()
