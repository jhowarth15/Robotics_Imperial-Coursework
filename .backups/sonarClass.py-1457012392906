import brickpi
import time
import numpy as np

class Sonar:
    interface = []
    port = 0
    sigma = 3
    motorTurn = 3.1
    def __init__(self,interf,p):
        # Setup sonar sensor
        self.interface = interf
        self.port = p
        self.interface.sensorEnable(0, brickpi.SensorType.SENSOR_ULTRASONIC)
        
        # Setup sonar motor
        self.motors = [1]

        self.interface.motorEnable(motors[0])

        self.motorParams = interface.MotorAngleControllerParameters()
        self.motorParams.maxRotationAcceleration = 9.0
        self.motorParams.maxRotationSpeed = 6.0
        self.motorParams.feedForwardGain = 255/20.0
        self.motorParams.minPWM = 5.0
        self.motorParams.pidParameters.minOutput = -255
        self.motorParams.pidParameters.maxOutput = 255
        self.motorParams.pidParameters.k_p = 100.0
        self.motorParams.pidParameters.k_i = 100.0
        self.motorParams.pidParameters.k_d = 80.0

        self.interface.setMotorAngleControllerParameters(motors[0],motorParams)


        

        
    def getSonarReading(self):
        
        i = 10
        sonarReadings = np.zeros(i)
        
        
        for j in range(i):
            sonarReadings[j] = self.interface.getSensorValue(self.port)[0]
            time.sleep(0.00105) #change this to change the speed of reading(this is enough for ~240
            
            
        print "Sonar Readings:", sonarReadings, "Median: ", np.median(sonarReadings)
        return np.median(sonarReadings)


    def getSonarAndAngleReading(self):
        i = 10
        sonarReadings = np.zeros(i)
        sonarAngles = np.zeros(i)
        
        
        for j in range(i):
            sonarReadings[j] = self.interface.getSensorValue(self.port)[0]
            sonarAngles[j] = interface.getMotorAngles(motors)[0]
            time.sleep(0.00105) #change this to change the speed of reading(this is enough for ~240
            
        sonarAngles /= motorTurn
        
        print "Sonar Reading:", np.median(sonarReadings), "Angle: ", np.mean(sonarAngles)
        return np.median(sonarReadings)
        
    def 