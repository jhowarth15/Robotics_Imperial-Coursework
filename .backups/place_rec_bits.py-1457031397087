#!/usr/bin/env python
# By Jacek Zienkiewicz and Andrew Davison, Imperial College London, 2014
# Based on original C code by Adrien Angeli, 2009

import random
import os
import math
import numpy as np
from sonar_return_signature import Sonar360
from sonarClass import Sonar
import brickpi
import time

# Location signature class: stores a signature characterizing one location
class LocationSignature:
    def __init__(self, no_bins = 120):
        self.sig = [0] * no_bins
        
    def print_signature(self):
        for i in range(len(self.sig)):
            print self.sig[i]

# --------------------- File management class ---------------
class SignatureContainer():
    def __init__(self, size = 5):
        self.size      = size; # max number of signatures that can be stored
        self.filenames = [];
        
        # Fills the filenames variable with names like loc_%%.dat 
        # where %% are 2 digits (00, 01, 02...) indicating the location number. 
        for i in range(self.size):
            self.filenames.append('loc_{0:02d}.dat'.format(i))

    # Get the index of a filename for the new signature. If all filenames are 
    # used, it returns -1;
    def get_free_index(self):
        n = 0
        while n < self.size:
            if (os.path.isfile(self.filenames[n]) == False):
                break
            n += 1
            
        if (n >= self.size):
            return -1;
        else:    
            return n;
 
    # Delete all loc_%%.dat files
    def delete_loc_files(self):
        print "STATUS:  All signature files removed."
        for n in range(self.size):
            if os.path.isfile(self.filenames[n]):
                os.remove(self.filenames[n])
            
    # Writes the signature to the file identified by index (e.g, if index is 1
    # it will be file loc_01.dat). If file already exists, it will be replaced.
    def save(self, signature, index):
        filename = self.filenames[index]
        if os.path.isfile(filename):
            os.remove(filename)
            
        f = open(filename, 'w')

        for i in range(len(signature.sig)):
            s = str(int(signature.sig[i])) + "\n"
            f.write(s)
        f.close();

    # Read signature file identified by index. If the file doesn't exist
    # it returns an empty signature.
    def read(self, index):
        ls = LocationSignature()
        filename = self.filenames[index]
        if os.path.isfile(filename):
            f = open(filename, 'r')
            for i in range(len(ls.sig)):
                s = f.readline()
                if (s != ''):
                    ls.sig[i] = int(s)
            f.close();
        else:
            print "WARNING: Signature does not exist."
        
        return ls
        
    # FILL IN: spin robot or sonar to capture a signature and store it in ls
    def characterize_location(self):
        result = self.getSignature()
        #print "TODO:    You should implement the function that captures a signature."
        # for i in range(len(ls.sig)):
        #     ls.sig[i] = result[i]
        return result

    # Convert depth vs. angle histogram to a depth frequency histogram
    def depth_histogram(self, ls):
        hist = [0] * 52
        for i in range(len(ls.sig)):
            j = ls.sig[i] // 5
            hist[int(j)] += 1
        print hist
        return hist

    # calculate sum of square differences between two depth frequency histograms
    def square_diffs(self, depth1, depth2):
        sum = 0
        for i in range(len(depth1)):
            sum += math.pow(depth1[i]-depth2[i], 2)
        return sum



    # FILL IN: compare two signatures
    def compare_signatures(self, ls1, ls2):
        dist = 0
        depth1 = self.depth_histogram(ls1)
        depth2 = self.depth_histogram(ls2)
        dist = self.square_diffs(depth1, depth2)
        #print "TODO:    You should implement the function that compares two signatures."
        return dist

    # This function characterizes the current location, and stores the obtained 
    # signature into the next available file.
    def learn_location(self):
        ls = LocationSignature()
        self.characterize_location(ls)
        idx = signatures.get_free_index();
        if (idx == -1): # run out of signature files
            print "\nWARNING:"
            print "No signature file is available. NOTHING NEW will be learned and stored."
            print "Please remove some loc_%%.dat files.\n"
            return

        signatures.save(ls,idx)
        print "STATUS:  Location " + str(idx) + " learned and saved."

    # This function tries to recognize the current location.
    # 1.   Characterize current location
    # 2.   For every learned locations
    # 2.1. Read signature of learned location from file
    # 2.2. Compare signature to signature coming from actual characterization
    # 3.   Retain the learned location whose minimum distance with
    #      actual characterization is the smallest.
    # 4.   Display the index of the recognized location on the screen
    def recognize_location(self):
        ls_obs = self.characterize_location()
        dist = [0] * self.size

        # FILL IN: COMPARE ls_read with ls_obs and find the best match
        for idx in range(self.size):
            print "STATUS:  Comparing signature " + str(idx) + " with the observed signature."
            ls_read = self.read(idx);
            dist[idx] = self.compare_signatures(ls_obs, ls_read)
        return np.argmin(dist)
    
    def recognize_angle(self, observerd_sig, location_sig):
        err = np.zeros(self.size)
        
        print "STATUS: Estimating angle"
        for i in range(self.size):
            err[i] = np.sum((np.roll(obs_sig, i) - read_sig) ** 2)
            
        best_guess = np.argmin(err)
        
        est_angle = ((best_guess / float(self.sig)) * math.pi) - math.pi
        
        print "STATUS: Best angle found. Offset: ", best_guess, ", Angle: ", est_angle
        
        return est_angle

    def getSonar360(self):
        interface=brickpi.Interface()
        interface.initialize()

        motors = [1]

        interface.motorEnable(motors[0])


        #Correctly tuned
        motorParams = interface.MotorAngleControllerParameters()
        motorParams.maxRotationAcceleration = 6.0
        motorParams.maxRotationSpeed = 8.0
        motorParams.feedForwardGain = 255/20.0
        motorParams.minPWM = 5.0
        motorParams.pidParameters.minOutput = -255
        motorParams.pidParameters.maxOutput = 255
        motorParams.pidParameters.k_p = 172.0
        motorParams.pidParameters.k_i = 16.0
        motorParams.pidParameters.k_d = 150.0

        interface.setMotorAngleControllerParameters(motors[0],motorParams)


        interface.sensorEnable(0, brickpi.SensorType.SENSOR_ULTRASONIC)
        sonarSensor = Sonar(interface, 0)

        #Set angle diff between readings

        degreeIncs = 60  # 2 degree increments


        sonarSignatures = np.zeros(degreeIncs)


        #Turn 180 right while taking sonar readings
        full360 = 17.486 + 0.746
        increment = full360/degreeIncs #make 5 degrees for start
        startAngle = interface.getMotorAngles(motors)[0][0] 
        motorAngle = startAngle
        interface.increaseMotorAngleReferences(motors,[full360])        
        i = -1 #incerement when angle has incremented by degreeIncs

        while (motorAngle < (startAngle + full360 - 0.077)): #0.077 is a consistent error value for speed
            motorAngle = interface.getMotorAngles(motors)[0][0]
            if ((motorAngle-startAngle) // increment) > i:
                i += 1
                sonarSignatures[i] = sonarSensor.getSonarReading()

        #print len(sonarSignatures)
        #print sonarSignatures

        interface.increaseMotorAngleReferences(motors,[-full360/2 + 0.21])

        time.sleep(2.8)

        return sonarSignatures
    
    
